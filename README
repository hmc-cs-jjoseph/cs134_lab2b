NAME: Jesse Joseph
EMAIL: jjoseph@hmc.edu
ID: 040161840

ABOUT:

FILES:
 - lab2_list.c
 - SortedList.h
 - SortedList.c
 - lab2_list.csv
 - add_test.sh - shell script for running add tests
 - list_test.sh - shell script for running list tests

QUESTIONS

Question 2.3.1 - Cycles in the basic list implementation
Where do you believe most of the cycles are spent in the 1 and 2-thread list tests ?
Why do you believe these to be the most expensive parts of the code?
	-With just 1 or 2 threads, there's very little contention. I'd bet that the most cycles are spent in the insert
	operations, because they need to traverse an average of half the list length and compare each key, which will
	be an expensive operation. Length, however, may also be expensive because it needs to traverse the entire
	list.
Where do you believe most of the time/cycles are being spent in the high-thread spin-lock tests?
	-In the spin lock tests with high contention, a huge amount of time is spent spinning. Most threads
	won't be able to run when given the opportunity, and will sit and spin for their entire time.
Where do you believe most of the time/cycles are being spent in the high-thread mutex tests?
	-In the mutex implementation, the blocked threads won't waste time spinning and doing nothing. When a blocked
	thread is brought to the front of the queue, if it cannot take the lock, it won't spin, but it will cause a
	context switch to put the thread back to sleep to wait its turn again. Significant time is probably spent in 
	the context switches.

Question 2.3.2 - Execution profiling
Where (what lines of code) are consuming most of the cycles when the spin-lock version of the list exerciser is run with a large number of threads?
	- I used linux perf instead of google-pprof. perf samples at a continuous rate, and so the number of samples collected by perf in a given method
	is directly proportional to the time spent in that method. perf shows that the vast majority of the time was spent spinning in the spin lock.
		- In the test I just did, 88% of samples were taken during the routine spinLock
Why does this operation become so expensive with large numbers of threads?
	-This is expensive under high contention because every thread that wakes up blocked sits at this function and executes the expensive atomit test and set until it's out of time.

